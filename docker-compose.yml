
#
# Usage:
# ------
#
# This docker compose file parameterizes build configurations using environment
# variables from the host. The default values for the build configuration
# variables are set in `.env`.
#
# Variables:
#   ARCH={amd64, arm64v8, ...}
#   COMPILER_TYPE={gnu, clang, intel, nvidia}
#   COMPILER={gcc-8, gcc-9, gcc-10,
#             clang-5.0, clang-6.0, clang-7, clang-8,
#             clang-9, clang-10,
#             icc-18, icc-19,
#             nvcc-10, nvcc-11}
#   REPO=lifflander1/checkpoint
#   UBUNTU={18.04, 20.04}
#   ULIMIT_CORE=0
#
# DARMA/checkpoint Configuration Variables:
#   CHECKPOINT_TESTS=1                        # Enable checkpoint tests
#   CHECKPOINT_EXAMPLES=1                     # Enable checkpoint examples
#   CHECKPOINT_MPI=1                          # Enable checkpoint MPI tests
#   CHECKPOINT_WARNINGS_AS_ERRORS=0           # Treat warnings as errors in compilation
#   CHECKPOINT_ASAN=0                         # Enable address sanitizer in build
#   CHECKPOINT_UBSAN=0                        # Enable undefined behavior sanitizer in build
#   CHECKPOINT_DOCS=0                         # Enable doxygen build
#   CHECKPOINT_SERIALIZATION_ERROR_CHECKING=0 # Enable extensive serialization error checking
#   BUILD_TYPE=release                        # CMake build type
#   CODE_COVERAGE=0                           # Enable generation of code coverage reports
#
# In order to run in the container, there are two stages. First, one must build
# or pull the base container with the variables exported (or using the defaults
# in `checkpoint/.env` that configure it:
#
# For a non-interactive build with gcc-8, since gnu is the default compiler
# type, one may do the following:
#
#  $ COMPILER=gcc-8 docker-compose pull ubuntu-cpp
#  $ COMPILER=gcc-8 docker-compose run ubuntu-cpp
#

# Need verision >= 3.5 for the features in use
version: '3.5'

# Named volumes must be predefined according the docker compose rules. Many
# combinations have already been added, but if a needed configuration is missing
# add it to this list.
volumes:
  amd64-ubuntu-18.04-clang-5.0-cache:
  amd64-ubuntu-18.04-clang-6.0-cache:
  amd64-ubuntu-18.04-clang-7-cache:
  amd64-ubuntu-18.04-clang-8-cache:
  amd64-ubuntu-18.04-clang-9-cache:
  amd64-ubuntu-20.04-clang-10-cache:
  amd64-ubuntu-18.04-gcc-8-cache:
  amd64-ubuntu-20.04-gcc-9-cache:
  amd64-ubuntu-20.04-gcc-10-cache:
  amd64-ubuntu-18.04-icc-18-cache:
  amd64-ubuntu-18.04-icc-19-cache:
  amd64-ubuntu-18.04-nvcc-10-cache:
  amd64-ubuntu-18.04-nvcc-11-cache:

# Define basic rules for ccache used across multiple services. The beauty of
# docker compose with cached volumes is that similarily configured builds will
# reuse a ccache volume making build speeds much faster than a fresh build each
# time.
x-ccache: &ccache
  CCACHE_COMPILERCHECK: content
  CCACHE_COMPRESS: 1
  CCACHE_COMPRESSLEVEL: 5
  CCACHE_MAXSIZE: 700M
  CCACHE_DIR: /build/ccache

# Define rules for CheckPoint configuration options across various services
x-checkpointopts: &checkpointopts
  CHECKPOINT_TESTS_ENABLED: ${CHECKPOINT_TESTS:-1}
  CHECKPOINT_EXAMPLES_ENABLED: ${CHECKPOINT_EXAMPLES:-1}
  CHECKPOINT_MPI_ENABLED: ${CHECKPOINT_MPI:-1}
  CHECKPOINT_ASAN_ENABLED: ${CHECKPOINT_ASAN:-0}
  CHECKPOINT_UBSAN_ENABLED: ${CHECKPOINT_UBSAN:-0}
  CHECKPOINT_WARNINGS_AS_ERRORS: ${CHECKPOINT_WARNINGS_AS_ERRORS:-0}
  CHECKPOINT_DOXYGEN_ENABLED: ${CHECKPOINT_DOCS:-0}
  CMAKE_BUILD_TYPE: ${BUILD_TYPE:-release}
  CHECKPOINT_SERIALIZATION_ERROR_CHECKING_ENABLED: ${CHECKPOINT_SERIALIZATION_ERROR_CHECKING:-0}
  CODE_COVERAGE: ${CODE_COVERAGE:-0}
  https_proxy: ${PROXY-}
  http_proxy: ${PROXY-}
  CODECOV_TOKEN: ${CODECOV_TOKEN:-}

services:
  ##############################################################################
  # C++ builds of Checkpoint on linux platform from container baseline
  # Ubuntu gcc-8 debug build:
  #   docker-compose run -e CMAKE_BUILD_TYPE=debug ubuntu-cpp
  ubuntu-cpp:
    image: ${REPO}:${ARCH}-ubuntu-${UBUNTU}-${COMPILER}-cpp
    build:
      context: .
      target: base
      dockerfile: ci/docker/ubuntu-${UBUNTU}-${COMPILER_TYPE}-cpp.dockerfile
      cache_from:
        - ${REPO}:${ARCH}-ubuntu-${UBUNTU}-${COMPILER}-cpp
      args: &default-args
        arch: ${ARCH}
        proxy: ${PROXY}
        compiler: ${COMPILER}
        distro: ${UBUNTU}
    ulimits: &ulimits
      core: ${ULIMIT_CORE}
    environment:
      <<: *ccache
      <<: *checkpointopts
    volumes: &ubuntu-volumes
      - .:/checkpoint:delegated
      - ${CACHE}${ARCH}-ubuntu-${UBUNTU}-${COMPILER}-cache:/build:delegated
    command: &vt-cpp-command >
      /bin/bash -c "
        /checkpoint/ci/build_cpp.sh /checkpoint /build &&
        /checkpoint/ci/test_cpp.sh  /checkpoint /build"

  ubuntu-cpp-vt:
    image: ${REPO}:${ARCH}-ubuntu-${UBUNTU}-${COMPILER}-cpp
    build:
      context: .
      target: base
      dockerfile: ci/docker/ubuntu-${UBUNTU}-${COMPILER_TYPE}-cpp.dockerfile
      cache_from:
        - ${REPO}:${ARCH}-ubuntu-${UBUNTU}-${COMPILER}-cpp
      args: *default-args
    ulimits: *ulimits
    environment:
      <<: *ccache
      <<: *checkpointopts
    volumes: *ubuntu-volumes
    command: &build-against-vt-cpp-command >
      /bin/bash -c "
        /checkpoint/ci/build_against_vt.sh /vt /build /checkpoint
        /vt/ci/test_cpp.sh /vt /build"

  ##############################################################################
  # Interactive C++ setup of Checkpoint on ubuntu platform from container
  # baseline.
  #
  # After running:
  #   docker-compose run ubuntu-cpp-interactive
  #
  # You will get a command line where you can run the build command:
  #   $ /checkpoint/ci/build_cpp.sh /checkpoint /build
  #   $ /checkpoint/ci/test_cpp.sh  /checkpoint /build
  ubuntu-cpp-interactive:
    image: ${REPO}:${ARCH}-ubuntu-${UBUNTU}-${COMPILER}-cpp
    build:
      context: .
      target: base
      dockerfile: ci/docker/ubuntu-${UBUNTU}-${COMPILER_TYPE}-cpp.dockerfile
      cache_from:
        - ${REPO}:${ARCH}-ubuntu-${UBUNTU}-${COMPILER}-cpp
      args: *default-args
    ulimits: *ulimits
    environment:
      <<: *ccache
      <<: *checkpointopts
    volumes: *ubuntu-volumes

  ##############################################################################
  # Build documentation for Checkpoint in the container on ubuntu platform from
  # container baseline.
  ubuntu-docs:
    image: ${REPO}:${ARCH}-ubuntu-${UBUNTU}-${COMPILER}-docs
    build:
      context: .
      target: base
      dockerfile: ci/docker/ubuntu-${UBUNTU}-${COMPILER_TYPE}-docs.dockerfile
      cache_from:
        - ${REPO}:${ARCH}-ubuntu-${UBUNTU}-${COMPILER}-cpp
      args:
        <<: *default-args
        token: ${TOKEN}
    ulimits: *ulimits
    environment:
      <<: *ccache
      CHECKPOINT_DOXYGEN_ENABLED: 1
      CMAKE_BUILD_TYPE: ${BUILD_TYPE:-release}
    volumes: *ubuntu-volumes
    command: &docs-cpp-command >
      /bin/bash -c "
        /checkpoint/ci/build_cpp.sh /checkpoint /build ${TOKEN}"
